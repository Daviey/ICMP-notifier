package main

import (
	"encoding/base64"
	"flag"
	"fmt"
	"io/ioutil"
	"log"
	"net"
	"os"
	"path/filepath"
	"time"

	"github.com/mqu/go-notify"
)

// the icon file as base64
var iconb64 = `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`

func main() {
	listenIP := flag.String("ip", "0.0.0.0", "The IP to listen on.")
	flag.Parse()

	// create image file as temp
	icon, err := base64.StdEncoding.DecodeString(iconb64)
	if err != nil {
		panic(err)
	}

	imageFile, err := ioutil.TempFile(os.TempDir(), filepath.Base(os.Args[0]))
	if err != nil {
		log.Fatal(err)
	}
	defer os.Remove(imageFile.Name())

	fileContents := []byte(icon)
	if _, err = imageFile.Write(fileContents); err != nil {
		log.Fatal("Failed to write out image file", err)
	}
	if err := imageFile.Close(); err != nil {
		log.Fatal(err)
	}

	conn, err := net.ListenIP("ip4:"+"icmp", &net.IPAddr{IP: net.ParseIP(*listenIP)})
	if err != nil {
		log.Println("Error listening: ", err.Error())
		log.Println(" - HINT, you may need to add permission - # setcap cap_net_raw+eip", os.Args[0])
		return

	}

	notify.Init("ICMP-Notifier")
	notifymsg := notify.NotificationNew("ICMP-Notifier", "Listening for ICMP on IP: "+*listenIP, imageFile.Name())
	notifymsg.SetTimeout(10)
	notifymsg.Show()

	buf := make([]byte, 128)
	for {
		_, ip, err := conn.ReadFrom(buf)
		if err != nil {
			break
		}

		output := fmt.Sprintf("ICMP packet from IP: %s", ip)
		log.Println(output)

		dt := time.Now()
		output = fmt.Sprintf("[%s] %s", dt.Format("15:04:05"), output)

		notifymsg.Update("ICMP-Notifier", output, imageFile.Name())
		notifymsg.Show()

	}
}
